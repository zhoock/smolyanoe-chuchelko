// src/components/AudioPlayer/AudioPlayer.tsx
import React, { useState, useRef, useEffect, useCallback } from 'react';
import clsx from 'clsx';
import { AlbumCover } from '@entities/album';
import { IAlbums } from '../../models';
import { gaEvent } from '../../utils/ga';
import './style.scss';

export default function AudioPlayer({
  album,
  setBgColor,
  activeTrackIndex = 0,
  playRequestId,
  onTrackChange,
}: {
  album: IAlbums;
  activeTrackIndex?: number;
  playRequestId: number;
  onTrackChange?: (index: number) => void;
  setBgColor: (color: string) => void;
}) {
  const currentTrackIndex = Math.min(
    Math.max(activeTrackIndex ?? 0, 0),
    Math.max(album.tracks.length - 1, 0)
  );
  const [isPlaying, setIsPlaying] = useState(false); // —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∏–≥—Ä–∞–µ—Ç –ª–∏ —Ç—Ä–µ–∫ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ false)
  const [progress, setProgress] = useState(0); // –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)
  const [volume, setVolume] = useState(50); // —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50%)
  const [isSeeking, setIsSeeking] = useState(false); // —É–∫–∞–∑—ã–≤–∞–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–º–æ—Ç–∫—É
  const [time, setTime] = useState({ current: 0, duration: NaN }); // –æ–±—ä–µ–∫—Ç —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Ç—Ä–µ–∫–∞
  const getAlbumId = (a: IAlbums) =>
    a.albumId ?? `${a.artist}-${a.album}`.toLowerCase().replace(/\s+/g, '-'); // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–ª—å–±–æ–º–∞
  const startedKeyRef = useRef<string | null>(null); // —Ö—Ä–∞–Ω–∏—Ç –∫–ª—é—á —Å–æ–±—ã—Ç–∏—è "started", —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑

  const audioRef = useRef<HTMLAudioElement | null>(null); // —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç <audio>, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–∏–≥—Ä–∞–µ—Ç, —Å—Ç–∞–≤–∏—Ç—Å—è –Ω–∞ –ø–∞—É–∑—É –∏ —Ç. –¥.)
  const latestTimeRef = useRef({ current: 0, duration: 1 }); // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –±–µ–∑ –≤—ã–∑–æ–≤–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  useEffect(() => {
    if (audioRef.current) {
      console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å:', volume);
      audioRef.current.volume = volume / 100;
    }
  }, [volume]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–º–µ–Ω—ã —Ç—Ä–µ–∫–∞
  useEffect(() => {
    if (audioRef.current) {
      console.log('–ú–µ–Ω—è–µ–º —Ç—Ä–µ–∫:', album.tracks[currentTrackIndex]?.src);
      audioRef.current.src = album.tracks[currentTrackIndex]?.src || '';
      audioRef.current.load(); // –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –¢–û–õ–¨–ö–û –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞

      startedKeyRef.current = null; // —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∫–ª—é—á —Å–æ–±—ã—Ç–∏—è "started" –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞
    }
  }, [currentTrackIndex, album]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º (–∏–≥—Ä–∞–µ—Ç/–ø–∞—É–∑–∞)
  useEffect(() => {
    const el = audioRef.current;
    if (!el) return;
    if (isPlaying) el.play().catch(console.error);
    else el.pause();
  }, [isPlaying, currentTrackIndex]);

  // –°—Ç–∞—Ä—Ç—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑–≤–Ω–µ
  useEffect(() => {
    if (!playRequestId) return;
    const el = audioRef.current;
    if (!el) return;
    el.currentTime = 0;
    el.play().catch(console.error);
    setIsPlaying(true);
  }, [playRequestId, currentTrackIndex]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const handleTrackEnd = () => {
      console.log('üéµ –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π');
      if (album.tracks.length === 0) return;
      const nextIndex = (currentTrackIndex + 1) % album.tracks.length;
      if (onTrackChange) {
        onTrackChange(nextIndex);
      } else if (audio) {
        audio.currentTime = 0;
        audio.play().catch(console.error);
      }
    };

    audio.addEventListener('ended', handleTrackEnd);

    return () => {
      audio.removeEventListener('ended', handleTrackEnd);
    };
  }, [album.tracks.length, currentTrackIndex, onTrackChange]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  useEffect(() => {
    const el = audioRef.current; // –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ —Å—Å—ã–ª–∫—É
    if (!el) return;

    const updateProgress = () => {
      if (isSeeking) return;
      const current = el.currentTime;
      const duration = el.duration;
      if (isNaN(duration) || duration === 0) return;

      latestTimeRef.current = { current, duration };
      setTime({ current: latestTimeRef.current.current, duration: latestTimeRef.current.duration });

      const newProgress = (current / duration) * 100;
      setProgress(newProgress);

      const progressBar = document.querySelector(
        '.player__progress-bar input'
      ) as HTMLInputElement | null;
      if (progressBar) progressBar.style.setProperty('--progress-width', `${newProgress}%`);
    };

    const onMetadataLoaded = () => {
      setTime({ current: 0, duration: el.duration });
    };

    el.addEventListener('timeupdate', updateProgress);
    el.addEventListener('loadedmetadata', onMetadataLoaded);

    return () => {
      el.removeEventListener('timeupdate', updateProgress);
      el.removeEventListener('loadedmetadata', onMetadataLoaded);
    };
  }, [isSeeking, time.duration]);

  useEffect(() => {
    const el = audioRef.current;
    if (!el) return;

    const albumId = getAlbumId(album);

    const onPlaying = () => {
      // –∫–ª—é—á –¥–ª—è "–æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Ç—Ä–µ–∫"
      const key = `${albumId}:${currentTrackIndex}`;
      if (startedKeyRef.current === key) return; // —É–∂–µ —Å–ª–∞–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞

      const t = album.tracks[currentTrackIndex];
      gaEvent('audio_start', {
        album_id: albumId,
        album_title: album.album,
        track_id: t?.id ?? String(currentTrackIndex),
        track_title: t?.title ?? 'Unknown Track',
        position_seconds: Math.floor(el.currentTime), // –æ–±—ã—á–Ω–æ 0 –≤ —Å—Ç–∞—Ä—Ç
      });

      startedKeyRef.current = key;
    };

    el.addEventListener('playing', onPlaying);
    return () => el.removeEventListener('playing', onPlaying);
  }, [album, currentTrackIndex]);

  useEffect(() => {
    const el = audioRef.current;
    if (!el) return;

    const albumId = getAlbumId(album);

    const onPause = () => {
      const t = album.tracks[currentTrackIndex];
      gaEvent('audio_pause', {
        album_id: albumId,
        album_title: album.album,
        track_id: t?.id ?? String(currentTrackIndex),
        track_title: t?.title ?? 'Unknown Track',
        position_seconds: Math.floor(el.currentTime),
      });
    };

    el.addEventListener('pause', onPause);
    return () => el.removeEventListener('pause', onPause);
  }, [album, currentTrackIndex]);

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è 123 ‚Üí "2:03".
  const formatTime = (time: number) => {
    if (isNaN(time)) return '--:--';
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };

  // –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø

  // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ/–ø–∞—É–∑—É
  const togglePlayPause = () => {
    if (audioRef.current) {
      if (isPlaying) {
        console.log('–ü–∞—É–∑–∞');
        audioRef.current.pause();
      } else {
        console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
        audioRef.current.play().catch(console.error);
      }
      setIsPlaying(!isPlaying);
    }
  };

  // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
  const nextTrack = () => {
    if (!album.tracks.length) return;
    const nextIndex = (currentTrackIndex + 1) % album.tracks.length;
    onTrackChange?.(nextIndex);
  };

  // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
  const prevTrack = () => {
    if (!album.tracks.length) return;
    const prevIndex = (currentTrackIndex - 1 + album.tracks.length) % album.tracks.length;
    onTrackChange?.(prevIndex);
  };

  // –ü–æ–ª–∑—É–Ω–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–º–∞—Ç—ã–≤–∞—Ç—å —Ç—Ä–µ–∫.
  const handleProgressChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (audioRef.current) {
      setIsSeeking(true);
      const newTime = (Number(event.target.value) / 100) * time.duration;
      audioRef.current.currentTime = newTime;
      setTime((prev) => ({ ...prev, current: newTime }));
      setProgress(Number(event.target.value));

      event.target.style.setProperty('--progress-width', `${event.target.value}%`);
    }
  };

  const handleSeekEnd = () => {
    setIsSeeking(false);
    if (isPlaying && audioRef.current) {
      audioRef.current.play().catch(console.error);
    }
  };

  const handleVolumeChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newVolume = Number(event.target.value);
    setVolume(newVolume);

    if (audioRef.current) {
      audioRef.current.volume = newVolume / 100;
    }

    event.target.style.setProperty('--volume-progress-width', `${newVolume}%`);
  };

  const handleColorsExtracted = useCallback(
    ({ dominant, palette }: { dominant: string; palette: string[] }) => {
      setBgColor(`linear-gradient(var(--rotate, 132deg), ${dominant}, ${palette[6] || dominant})`);
    },
    [setBgColor]
  );

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  return (
    <div className="player">
      <div
        className={clsx('player__cover', {
          'player__cover--playing': isPlaying,
          'player__cover--paused': !isPlaying,
        })}
      >
        <AlbumCover
          {...album.cover}
          fullName={album.fullName}
          onColorsExtracted={handleColorsExtracted}
        />
      </div>

      <div className="player__track-info">
        <h2>{album.tracks[currentTrackIndex]?.title || 'Unknown Track'}</h2>
        <h3>{album.artist || 'Unknown Artist'}</h3>
      </div>

      <div className="player__progress-container">
        <div className="player__progress-bar">
          <input
            type="range"
            value={progress}
            min="0"
            max="100"
            onChange={handleProgressChange}
            onMouseUp={handleSeekEnd}
            onTouchEnd={handleSeekEnd}
          />
        </div>
        <div className="player__time-container">
          <span className="player__time">{formatTime(time.current)}</span>
          <span className="player__time">-{formatTime(time.duration - time.current)}</span>
        </div>
      </div>

      <div className="player__controls">
        <button onClick={prevTrack}>
          <span className="icon-controller-fast-backward"></span>
        </button>
        <button onClick={togglePlayPause}>
          {isPlaying ? (
            <span className="icon-controller-pause"></span>
          ) : (
            <span className="icon-controller-play"></span>
          )}
        </button>
        <button onClick={nextTrack}>
          <span className="icon-controller-fast-forward"></span>
        </button>
      </div>

      <div className="player__volume-control">
        <span className="icon-volume-mute"></span>
        <input type="range" value={volume} min="0" max="100" onChange={handleVolumeChange} />
        <span className="icon-volume-hight"></span>
      </div>
      <audio ref={audioRef} />
    </div>
  );
}
